paths:
  /widgets:
    post:
      tags:
        - widget
      summary: Create a new instance of the model and persist it into the data source.
      operationId: widget.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/widget'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
    put:
      tags:
        - widget
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: widget.upsert__put_widgets
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/widget'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
    patch:
      tags:
        - widget
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: widget.upsert__patch_widgets
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/widget'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
    get:
      tags:
        - widget
      summary: Find all instances of the model matched by filter from the data source.
      operationId: widget.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/widget'
      deprecated: false
  /widgets/replaceOrCreate:
    post:
      tags:
        - widget
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: widget.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/widget'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
  /widgets/upsertWithWhere:
    post:
      tags:
        - widget
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: widget.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/widget'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
  '/widgets/{id}/exists':
    get:
      tags:
        - widget
      summary: Check whether a model instance exists in the data source.
      operationId: 'widget.exists__get_widgets_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/widgets/{id}':
    head:
      tags:
        - widget
      summary: Check whether a model instance exists in the data source.
      operationId: 'widget.exists__head_widgets_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - widget
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: widget.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
    delete:
      tags:
        - widget
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: widget.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - widget
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'widget.prototype.updateAttributes__put_widgets_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/widget'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
    patch:
      tags:
        - widget
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'widget.prototype.updateAttributes__patch_widgets_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/widget'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
  '/widgets/{id}/replace':
    post:
      tags:
        - widget
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: widget.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/widget'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
  /widgets/findOne:
    get:
      tags:
        - widget
      summary: Find first instance of the model matched by filter from the data source.
      operationId: widget.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/widget'
      deprecated: false
  /widgets/update:
    post:
      tags:
        - widget
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: widget.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/widget'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /widgets/count:
    get:
      tags:
        - widget
      summary: Count instances of the model matched by where from the data source.
      operationId: widget.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /people:
    post:
      tags:
        - person
      summary: Create a new instance of the model and persist it into the data source.
      operationId: person.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    put:
      tags:
        - person
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: person.upsert__put_people
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    patch:
      tags:
        - person
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: person.upsert__patch_people
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    get:
      tags:
        - person
      summary: Find all instances of the model matched by filter from the data source.
      operationId: person.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/person'
      deprecated: false
  /people/replaceOrCreate:
    post:
      tags:
        - person
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: person.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  /people/upsertWithWhere:
    post:
      tags:
        - person
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: person.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  '/people/{id}/exists':
    get:
      tags:
        - person
      summary: Check whether a model instance exists in the data source.
      operationId: 'person.exists__get_people_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/people/{id}':
    head:
      tags:
        - person
      summary: Check whether a model instance exists in the data source.
      operationId: 'person.exists__head_people_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - person
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: person.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    delete:
      tags:
        - person
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: person.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - person
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'person.prototype.updateAttributes__put_people_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    patch:
      tags:
        - person
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'person.prototype.updateAttributes__patch_people_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  '/people/{id}/replace':
    post:
      tags:
        - person
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: person.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  /people/findOne:
    get:
      tags:
        - person
      summary: Find first instance of the model matched by filter from the data source.
      operationId: person.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  /people/update:
    post:
      tags:
        - person
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: person.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /people/count:
    get:
      tags:
        - person
      summary: Count instances of the model matched by where from the data source.
      operationId: person.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /people/login:
    post:
      tags:
        - person
      summary: Login a user with username/email and password.
      operationId: person.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /people/logout:
    post:
      tags:
        - person
      summary: Logout a user with access token.
      operationId: person.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/confirm:
    get:
      tags:
        - person
      summary: Confirm a user registration with email verification token.
      operationId: person.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/reset:
    post:
      tags:
        - person
      summary: Reset password for a user with email.
      operationId: person.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Revisions:
    post:
      tags:
        - revisions
      summary: Create a new instance of the model and persist it into the data source.
      operationId: revisions.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/revisions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
    put:
      tags:
        - revisions
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: revisions.upsert__put_Revisions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/revisions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
    patch:
      tags:
        - revisions
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: revisions.upsert__patch_Revisions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/revisions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
    get:
      tags:
        - revisions
      summary: Find all instances of the model matched by filter from the data source.
      operationId: revisions.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/revisions'
      deprecated: false
  /Revisions/replaceOrCreate:
    post:
      tags:
        - revisions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: revisions.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/revisions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
  /Revisions/upsertWithWhere:
    post:
      tags:
        - revisions
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: revisions.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/revisions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
  '/Revisions/{id}/exists':
    get:
      tags:
        - revisions
      summary: Check whether a model instance exists in the data source.
      operationId: 'revisions.exists__get_Revisions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Revisions/{id}':
    head:
      tags:
        - revisions
      summary: Check whether a model instance exists in the data source.
      operationId: 'revisions.exists__head_Revisions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - revisions
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: revisions.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
    delete:
      tags:
        - revisions
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: revisions.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - revisions
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'revisions.prototype.updateAttributes__put_Revisions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/revisions'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
    patch:
      tags:
        - revisions
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'revisions.prototype.updateAttributes__patch_Revisions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/revisions'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
  '/Revisions/{id}/replace':
    post:
      tags:
        - revisions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: revisions.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/revisions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
  /Revisions/findOne:
    get:
      tags:
        - revisions
      summary: Find first instance of the model matched by filter from the data source.
      operationId: revisions.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/revisions'
      deprecated: false
  /Revisions/update:
    post:
      tags:
        - revisions
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: revisions.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/revisions'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Revisions/count:
    get:
      tags:
        - revisions
      summary: Count instances of the model matched by where from the data source.
      operationId: revisions.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  widget:
    properties:
      name:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
    additionalProperties: false
  x-any:
    properties: {}
  person:
    properties:
      name:
        type: string
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        $ref: '#/definitions/ObjectID'
      createdAt:
        type: string
        format: date
      updatedAt:
        type: string
        format: date
      createdBy:
        type: number
        format: double
      updatedBy:
        type: number
        format: double
      deletedAt:
        type: string
        format: date
      deletedBy:
        type: number
        format: double
    required:
      - name
      - email
      - createdAt
      - updatedAt
    additionalProperties: false
  revisions:
    description: Keep track of changes in your models.
    properties:
      action:
        type: string
      table_name:
        type: string
      row_id:
        type: number
        format: double
      old:
        $ref: '#/definitions/x-any'
      new:
        $ref: '#/definitions/x-any'
      user:
        type: string
      ip:
        type: string
      ip_forwarded:
        type: string
      created_at:
        type: string
        format: date
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - action
      - table_name
      - row_id
    additionalProperties: false
  ObjectID:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: loopback-auditz-example
  version: 1.0.0
  title: loopback-auditz-example
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
